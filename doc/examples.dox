/*
  This file is part of p4est.
  p4est is a C library to manage a collection (a forest) of multiple
  connected adaptive quadtrees or octrees in parallel.

  Copyright (C) 2010 The University of Texas System
  Written by Carsten Burstedde, Lucas C. Wilcox, and Tobin Isaac

  p4est is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  p4est is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with p4est; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/** \page Examples Documentation for selected example programs
 *
 * The p4est library comes with various example programs.
 * They are kept under the subdirectory
 * [example](https://github.com/cburstedde/p4est/tree/master/example).
 * Most have both a 2D and a 3D version.
 * When the library is configured `--enable-mpi`, they can all be run in
 * parallel on any number of MPI ranks, even on small computers.
 *
 * One first helpful program to try out is called `p4est_simple` (2D version)
 * and `p8est_simple` (3D version), both under
 * [simple](https://github.com/cburstedde/p4est/tree/master/example/simple).
 * We showcase some results further below on this page, and we encourage
 * everyone to play with the command line arguments.
 *
 * # The first step example
 *
 * Quite some time later, we created a range of step-by-step examples under
 * [steps](https://github.com/cburstedde/p4est/tree/master/example/steps).
 * Let us begin here with the first one that generates a mesh spelling
 * 'Hello, World!': \ref steps/p4est_step1.c.
 *
 *  This program performs refinement on a simple domain based on hardcoded
 * image data.
 * As a result, the output VTK file displays the phrase 'Hello World' by the
 * mesh refinement.
 *
 * Usage may be one of:
 *
 *  > `p4est_step1`
 *  or with MPI:
 *  > `mpirun -np 3 p4est_step1`
 *
 * * No. of trees: 1
 * * Maximum refinement level: 6
 *
 *  \image html HW.png
 *
 * # The historic simple example
 *
 * Another illustrative example can be found in \ref simple/simple2.c.
 * The refinement pattern is generated by some hardcoded prescriptions based
 * on a quadrant's tree number, refinement level and coordinates.
 * Please see the documentation under that link for a full list of configurations.
 *
 * This program creates/refines & coarsens/balances/partitions one
 * of several available geometries specified on the command line.
 * As a result, the output VTK files document all
 * the steps of the mesh manipulation process.
 *
 *  * Example: periodic
 *
 *    Create a connectivity structure for a periodic unit square.
 * The left and right faces are identified, and bottom and top opposite.
 *
 *    Usage:
 *    > `p4est_simple periodic 5`
 *    or with MPI:
 *    > `mpirun -np 4 p4est_simple periodic 5`
 *
 *    * No. of trees: 1
 *    * Maximum refinement level: chosen on the command line as 5
 *
 *  \image html periodic_balanced_lv5.png
 *
 *  * Example: circle
 *
 *    Create a connectivity structure for an donut-like circle.
 * The circle consists of 6 trees connecting each other by their faces.
 * The trees are laid out as a hexagon between \f$[-2, 2]\f$ in the y direction
 * and \f$[-\sqrt{3}, \sqrt{3}]\f$ in the x direction.  The hexagon has flat
 * sides along the y direction and pointy ends in x.
 *
 *    Usage:
 *    > `p4est_simple circle 5`
 *    or with MPI:
 *    > `mpirun -np 4 p4est_simple circle 5`
 *
 *    * No. of trees: 6
 *    * Maximum refinement level: chosen on the command line as 5
 *
 *  \image html circle_balanced_lv5.png
 *
 *  * Example: drop
 *
 *    Create a connectivity structure for a five-trees geometry with a hole.
 * The geometry covers the square \f$[0, 3]^2\f$, where the hole is \f$[1, 2]^2\f$.
 *
 *    Usage:
 *    > `p4est_simple drop 5`
 *    or with MPI:
 *    > `mpirun -np 7 p4est_simple drop 5`
 *
 *    * No. of trees: 5
 *    * Maximum refinement level: chosen on the command line as 5
 *  \image html drop_balanced_lv5.png
 *
 *  * Example: moebius
 *
 *    Create a connectivity structure for a five-tree moebius band.
 *
 *    Usage:
 *    > `p4est_simple moebius 5`
 *    or with MPI:
 *    > `mpirun -np 4 p4est_simple moebius 5`
 *
 *    * No. of trees: 5
 *    * Maximum refinement level: chosen on the command line as 5
 *
 *  \image html moebius_balanced_lv5.png
 *
 * # The GMT sphere model
 *
 * The GMT sphere model is one of the options offered by \ref gmt/gmt2.c.
 * It refines a spherical geometry based on geodesic data. Each quadrant on
 * the sphere is subdivided if it intersects a geodesic, until a desired
 * maximum refinement depth is reached. We start by seeing some examples,
 * before describing how the model is implemented.
 *
 * ## Spherical Hello World
 * 
 * The sphere model takes as input a .csv file with a list of geodesics.
 * The file example/gmt/sphere_hello_world.csv provides a convenient example
 * of such an input. 
 *
 *     0.0,50.0,0.0,130.0
 *     50.0,50.0,50.0,130.0
 *     0.0,90.0,50.0,90.0
 *     70.0,50.0,70.0,130.0
 *     70.0,50.0,110.0,50.0
 *     70.0,130.0,110.0,130.0
 *     70.0,90.0,110.0,90.0
 *     140.0,50.0,140.0,130.0
 *     140.0,130.0,180.0,130.0
 *     210.0,50.0,210.0,130.0
 *     210.0,130.0,250.0,130.0
 *     280.0,50.0,280.0,130.0
 *     320.0,50.0,320.0,130.0
 *     280.0,50.0,320.0,50.0
 *     280.0,130.0,320.0,130.0
 *
 * Each line \f$ \phi_1, \theta_1, \phi_2, \theta_2 \f$ represents the unique
 * geodesic between endpoints \f$ (\phi_1, \theta_1) \f$ and \f$ (\phi_2, 
 * \theta_2) \f$. Coordinates are specified 
 *
 * After refining according to the geodesics it lists, the
 * result will be the word HELLO written on the surface
 * of the sphere.
 *
 * We first preprocess this input into a form that will
 * allow us to easily compute quadrant-geodesic intersections. The
 * preprocessing script is invoked with the command:
 *
 * > `p4est_sphere_preprocessing <input.csv> <output_file_name>`
 *
 * Thus for our hello world example we run
 *
 * > `p4est_sphere_preprocessing 
 *    <path_to_p4est>/example/gmt/sphere_hello_world.csv
 *    hello_preproc`
 *  
 * After running this command there should be a file called `hello_preproc`
 * created in the working directory. Next we run the main refinement program
 * as follows
 *
 * > `p4est_gmt --sphere --resolution 10 -F hello_preproc`
 *
 * Here the flag `--sphere` specifies that we are running the sphere model,
 * `--resolution 10` specifies the maximum desired refinement level,
 * and `-F hello_preproc` specifies the input file that we created with the
 * preprocessing script. The program creates output files for each of the ten
 * refinement iterations. Visualising in Paraview, we see that the program has
 * refined the word HELLO on the sphere.
 *
 * \image html hello_H.png width=0.2*\textwidth
 *
 * ## Coastlines
 *
 * A more interesting example is to refine a map of the world based on
 * coastline data. We will work with the public domain
 * <a href="https://www.naturalearthdata.com/downloads/10m-physical-vectors/10m-coastline/">Natural Earth Coastline Dataset</a>.
 * A similar process could of course be applied to other datasets. 
 *
 * The dataset uses the shapefile (.shp) format, a common format for
 * cartographic data. Shapefiles consist of various shapes (Points, Polygons,
 * Lines, etc). In this case the shapefile `ne_10m_coastline.shp` represents
 * coastlines as Linestrings: chains of connected line segments, specified
 * by their endpoints. 
 * Coordinates are given in the <a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS84 projection</a>
 * coordinate system. We need to convert this data to a input .csv as in the
 * Hello World example. Support for shapefiles is limited in the
 * C language, so we will use the Python geopandas package to do this.
 *
 *     import geopandas as gpt
 *     shapefile = gpt.read_file(r'ne/ne_10m_coastline.shp')
 *
 * Our model uses a <a href="https://en.wikipedia.org/wiki/Spherical_coordinate_system#Coordinate_system_conversions">spherical coordinate system</a>
 * with polar angle \f$ \theta \in [0,180) \f$ and azimuth \f$ \phi \in 
 * [0,360) \f$. This differs from the WGS84 coordinate system that our dataset
 * comes in, so we define a function to convert to our desired coordinates.
 *
 *     def change_coords(a):
 *       b = [180 - a[0], a[1] + 90]
 *       return b
 *
 * We then simply go through each Linestring, extract its individual line
 * segments, convert coordinate systems, and write to our csv.
 *
 *     import csv
 *
 *     # open the output file in the write mode
 *     with open('coastlines.csv', 'w') as f:
 *       # create the csv writer
 *       writer = csv.writer(f)
 *
 *       n_linestrings = len(shapefile.geometry)
 *
 *       # for each linestring
 *       for l in range(n_linestrings):
 *         # for each line segment
 *         for i in range(len(shapefile.geometry[l].coords)-1):
 *           # extract segment endpoints
 *           a1 = shapefile.geometry[l].coords[i]
 *           a2 = shapefile.geometry[l].coords[i+1]
 *           # change endpoint coordinates to desired coordinate system
 *           a1 = change_coords(a1)
 *           a2 = change_coords(a2)
 *           # write line segment to csv
 *           writer.writerow([a1[0], a1[1], a2[0], a2[1]])
 *
 * ## How does it all work?
 *
 * (connectivity, geometry, geodesics)
 *
 */

/** \example steps/p4est_step1.c
 *  This software refines a basic domain using given image data.
 * As a result, the resulting VTK file showcases the message 'Hello
 * World' through the mesh.
 *
 * Usage:
 *    > `p4est_step1`
 */

/** \example simple/simple2.c
 * This application generates, refines, and adjusts a mesh set on the command line.
 * The resulting VTK files visually present each stage of the mesh
 * modification procedure.
 *
 * Usage:
 *    > `p4est_simple <configuration> <level>`
 *        possible configurations:
 *        * unit      Refinement on the unit square.
 *        * brick     Refinement on a regular forest of octrees.
 *        * three     Refinement on a forest with three trees.
 *        * evil      Check second round of refinement with np=5 level=7
 *        * evil3     Check second round of refinement on three trees
 *        * pillow    Refinement on a 2-tree pillow-shaped domain.
 *        * moebius   Refinement on a 5-tree Moebius band.
 *        * star      Refinement on a 6-tree star shaped domain.
 *        * cubed     Refinement on a 6-tree cubed sphere surface.
 *        * disk      Refinement on a 5-tree spherical standard disk.
 *        * xdisk     Refinement on a 5-tree spherical disk periodic in x.
 *        * ydisk     Refinement on a 5-tree spherical disk periodic in y.
 *        * pdisk     Refinement on a 5-tree spherical disk, periodic b.c.
 *        * periodic  Refinement on the unit square with all-periodic b.c.
 *        * rotwrap   Refinement on the unit square with weird periodic b.c.
 *        * circle    Refinement on a 6-tree donut-like circle.
 *        * drop      Refinement on a 5-trees geometry with an inner hole.
 *        * icosahedron   Refinement on the sphere
 *        * shell2d       Refinement on a 2d shell with geometry.
 *        * disk2d        Refinement on a 2d disk with geometry.
 *        * bowtie    Refinement on a 2-tree bowtie domain.
 */

/** \example gmt/gmt2.c
 * This application refines a mesh based on point intersections. At each
 * iteration each quadrant intersecting at least one point is subdivided once.
 * Here the term `point' is used in a very general sense and can for instance
 * refer to a geodesic on a sphere. The resulting VTK files represent the mesh
 * at each iteration.
 * 
 * There are 3 models: synthetic, sphere and latlong. Currently the sphere
 * model is the only one with extensive documentation.
 */